import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, StyleSheet, Pressable, ActivityIndicator } from 'react-native';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { useNavigation } from '@react-navigation/native';
import { format, addMonths, subMonths } from 'date-fns';
import { id } from 'date-fns/locale';
import { getMonthSessions, getReadingStats, getCalendarData, groupSessionsByDate } from '@/services/reading';
import { getCurrentStreak } from '@/services/checkins';
import { getProfileTimezone } from '@/services/profile';
import { supabase } from '@/lib/supabase';
import { StatsCard } from '@/features/reading/StatsCard';
import { StreakCalendar } from '@/features/reading/StreakCalendar';
import { OptimizedReadingList } from '@/features/reading/OptimizedReadingList';
import { colors } from '@/theme/colors';

export default function ProgressScreen() {
  const navigation = useNavigation<any>();
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const monthKey = format(currentMonth, 'yyyy-MM');
  const queryClient = useQueryClient();

  // Get user timezone for consistent date calculation
  const { data: userTimezone } = useQuery({
    queryKey: ['profile', 'timezone'],
    queryFn: getProfileTimezone,
    staleTime: 300_000, // 5 minutes
  });

  const { data: sessions, isLoading } = useQuery({
    queryKey: ['reading', 'history', monthKey],
    queryFn: () => getMonthSessions(currentMonth, userTimezone || 'Asia/Jakarta'),
    staleTime: 30000, // 30 seconds
    refetchOnWindowFocus: true,
    enabled: !!userTimezone
  });

  const { data: stats, isLoading: statsLoading, error: statsError } = useQuery({
    queryKey: ['reading', 'stats', monthKey],
    queryFn: () => {
      const start = format(new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1), 'yyyy-MM-dd');
      const end = format(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0), 'yyyy-MM-dd');
      console.log('üìä Fetching stats for:', { start, end, monthKey });
      return getReadingStats(start, end, userTimezone || 'Asia/Jakarta');
    },
    staleTime: 0, // Always refetch
    refetchOnWindowFocus: true,
    enabled: !!userTimezone
  });

  // Get streak data for calendar
  const { data: streakData } = useQuery({
    queryKey: ['streak', 'current'],
    queryFn: getCurrentStreak,
    staleTime: 30000, // 30 seconds
  });

  // Get calendar data for the current month
  const { data: calendarData } = useQuery({
    queryKey: ['reading', 'calendar', monthKey],
    queryFn: () => getCalendarData(currentMonth, userTimezone || 'Asia/Jakarta'),
    staleTime: 30000, // 30 seconds
    enabled: !!userTimezone
  });

  // Group sessions by date for the reading list
  const groupedSessions = sessions ? groupSessionsByDate(sessions) : [];

  // Get most read surah
  const mostReadSurah = stats?.mostReadSurah || null;

  // Navigation functions
  const goToPreviousMonth = () => {
    setCurrentMonth(prev => subMonths(prev, 1));
  };

  const goToNextMonth = () => {
    setCurrentMonth(prev => addMonths(prev, 1));
  };

  const goToCurrentMonth = () => {
    setCurrentMonth(new Date());
  };

  // Realtime sync: invalidate queries on checkins/reading_sessions changes
  useEffect(() => {
    let channel: any;
    let isMounted = true;
    const setup = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      const invalidateAll = () => {
        queryClient.invalidateQueries({ queryKey: ['reading', 'history', monthKey] });
        queryClient.invalidateQueries({ queryKey: ['reading', 'stats', monthKey] });
        queryClient.invalidateQueries({ queryKey: ['reading', 'calendar', monthKey] });
        queryClient.invalidateQueries({ queryKey: ['streak', 'current'] });
      };
      channel = supabase
        .channel('progress-realtime')
        .on('postgres_changes', { event: '*', schema: 'public', table: 'checkins', filter: `user_id=eq.${user.id}` }, invalidateAll)
        .on('postgres_changes', { event: '*', schema: 'public', table: 'reading_sessions', filter: `user_id=eq.${user.id}` }, invalidateAll)
        .subscribe();
    };
    setup();
    return () => {
      if (channel) supabase.removeChannel(channel);
      isMounted = false;
    };
  }, [queryClient, monthKey]);

  if (isLoading || statsLoading) {
    return (
      <View style={styles.centerContainer}>
        <ActivityIndicator size="large" color={colors.primary} />
        <Text style={styles.loadingText}>Memuat data bacaan...</Text>
        {statsError && (
          <Text style={[styles.loadingText, { color: 'red', marginTop: 8 }]}>
            Error: {statsError.message}
          </Text>
        )}
      </View>
    );
  }

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.content} showsVerticalScrollIndicator={false}>
      {/* Hero Section */}
      <View style={styles.heroSection}>
        <View style={styles.heroContent}>
          <Text style={styles.heroTitle}>Progres Bacaan</Text>
          <Text style={styles.heroSubtitle}>
            {format(currentMonth, 'MMMM yyyy', { locale: id })}
          </Text>
        </View>
        <View style={styles.streakBadge}>
          <Text style={styles.streakNumber}>{streakData?.current || 0}</Text>
          <Text style={styles.streakLabel}>Hari</Text>
        </View>
      </View>

      {/* Quick Stats Grid */}
      <View style={styles.statsGrid}>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>{stats?.totalAyat?.toLocaleString('id-ID') || '0'}</Text>
          <Text style={styles.statLabel}>Total Ayat</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>{stats?.daysRead || '0'}</Text>
          <Text style={styles.statLabel}>Hari Aktif</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>{Math.round(stats?.avgPerDay || 0)}</Text>
          <Text style={styles.statLabel}>Rata-rata/Hari</Text>
        </View>
      </View>

      {/* Calendar Section */}
      <View style={styles.calendarSection}>
        <View style={styles.calendarHeader}>
          <Text style={styles.sectionTitle}>Kalender Bacaan</Text>
          <View style={styles.monthNavigation}>
            <Pressable style={styles.navButton} onPress={goToPreviousMonth}>
              <Text style={styles.navButtonText}>&lt;</Text>
            </Pressable>
            <Pressable style={styles.monthButton} onPress={goToCurrentMonth}>
              <Text style={styles.monthButtonText}>Hari Ini</Text>
            </Pressable>
            <Pressable style={styles.navButton} onPress={goToNextMonth}>
              <Text style={styles.navButtonText}>&gt;</Text>
            </Pressable>
          </View>
        </View>
        <StreakCalendar
          currentMonth={currentMonth}
          onMonthChange={setCurrentMonth}
          checkinData={Object.entries(calendarData || {}).map(([date, v]: any) => ({ date, ayat_count: v?.ayatCount || 0 }))}
          streakData={{ current: (streakData as any)?.current || 0, last_date: (streakData as any)?.last_date || null }}
        />
      </View>

      {/* Action Cards */}
      <View style={styles.actionCards}>
        <Pressable
          style={styles.actionCard}
          onPress={() => navigation.navigate('Stats')}
        >
          <View style={styles.actionCardIcon}>
            <Text style={styles.actionCardIconText}>üìä</Text>
          </View>
          <View style={styles.actionCardContent}>
            <Text style={styles.actionCardTitle}>Analisis Mendalam</Text>
            <Text style={styles.actionCardSubtitle}>Trend & insight bacaan</Text>
          </View>
          <Text style={styles.actionCardArrow}>&rarr;</Text>
        </Pressable>

        <Pressable
          style={styles.actionCard}
          onPress={() => navigation.navigate('LogReading')}
        >
          <View style={styles.actionCardIcon}>
            <Text style={styles.actionCardIconText}>üìù</Text>
          </View>
          <View style={styles.actionCardContent}>
            <Text style={styles.actionCardTitle}>Catat Bacaan</Text>
            <Text style={styles.actionCardSubtitle}>Tambah progress hari ini</Text>
          </View>
          <Text style={styles.actionCardArrow}>&rarr;</Text>
        </Pressable>
      </View>

      {/* Reading History */}
      <View style={styles.historySection}>
        <Text style={styles.sectionTitle}>Riwayat Bacaan</Text>
        <OptimizedReadingList
          groupedSessions={groupedSessions}
          currentMonth={currentMonth}
          onRefresh={() => {
            queryClient.invalidateQueries({ queryKey: ['reading', 'history', monthKey] });
            queryClient.invalidateQueries({ queryKey: ['reading', 'stats', monthKey] });
            queryClient.invalidateQueries({ queryKey: ['reading', 'calendar', monthKey] });
          }}
        />
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FAFAFA',
  },
  content: {
    paddingBottom: 32,
  },
  centerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FAFAFA',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6B7280',
    fontWeight: '500',
  },
  
  // Hero Section
  heroSection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 24,
    backgroundColor: '#FFFFFF',
    marginBottom: 20,
  },
  heroContent: {
    flex: 1,
  },
  heroTitle: {
    fontSize: 28,
    fontWeight: '800',
    color: '#111827',
    letterSpacing: -0.5,
    marginBottom: 4,
  },
  heroSubtitle: {
    fontSize: 16,
    color: '#6B7280',
    fontWeight: '500',
  },
  streakBadge: {
    backgroundColor: colors.primary,
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 12,
    alignItems: 'center',
    minWidth: 80,
  },
  streakNumber: {
    fontSize: 24,
    fontWeight: '800',
    color: '#FFFFFF',
    lineHeight: 28,
  },
  streakLabel: {
    fontSize: 12,
    color: '#FFFFFF',
    fontWeight: '600',
    opacity: 0.9,
  },

  // Stats Grid
  statsGrid: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    marginBottom: 24,
    gap: 12,
  },
  statCard: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.04,
    shadowRadius: 8,
    elevation: 2,
  },
  statValue: {
    fontSize: 24,
    fontWeight: '800',
    color: colors.primary,
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#6B7280',
    fontWeight: '600',
    textAlign: 'center',
  },

  // Calendar Section
  calendarSection: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 20,
    borderRadius: 20,
    padding: 20,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.04,
    shadowRadius: 8,
    elevation: 2,
  },
  calendarHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#111827',
    letterSpacing: -0.2,
  },
  monthNavigation: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  navButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
  },
  navButtonText: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.primary,
  },
  monthButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: colors.primary,
    borderRadius: 12,
  },
  monthButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },

  // Action Cards
  actionCards: {
    paddingHorizontal: 20,
    marginBottom: 24,
    gap: 12,
  },
  actionCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.04,
    shadowRadius: 8,
    elevation: 2,
  },
  actionCardIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#F8FAFC',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  actionCardIconText: {
    fontSize: 22,
  },
  actionCardContent: {
    flex: 1,
  },
  actionCardTitle: {
    fontSize: 16,
    fontWeight: '700',
    color: '#111827',
    marginBottom: 2,
    letterSpacing: -0.2,
  },
  actionCardSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    fontWeight: '500',
  },
  actionCardArrow: {
    fontSize: 18,
    color: colors.primary,
    fontWeight: '600',
  },

  // History Section
  historySection: {
    paddingHorizontal: 20,
  },
});